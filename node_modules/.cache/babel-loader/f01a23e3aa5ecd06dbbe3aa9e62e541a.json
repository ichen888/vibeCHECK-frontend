{"ast":null,"code":"var _jsxFileName = \"/Users/jessicayu/Documents/GitHub/vibeCHECK-frontend/src/RecentComments.js\";\nimport React, { useState, useEffect } from 'react';\nconst RecentComments = ({\n  influencerId\n}) => {\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const placeholderComments = [{\n    id: 1,\n    Comment: \"Search for a celebrity to see what fans are saying\",\n    title: \"No comments yet\"\n  }, {\n    id: 2,\n    Comment: \"Discover fan reactions and discussions\",\n    title: \"Waiting for selection\"\n  }, {\n    id: 3,\n    Comment: \"See what people are talking about\",\n    title: \"Select a celebrity above\"\n  }];\n  useEffect(() => {\n    const fetchComments = async () => {\n      if (!influencerId) {\n        setComments(placeholderComments);\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        const response = await fetch('http://127.0.0.1:8000/Videos');\n        if (!response.ok) {\n          throw new Error('Failed to fetch comments');\n        }\n        const data = await response.json();\n        const filteredComments = data.filter(item => item.influencer_id === influencerId).sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0)).slice(0, 3).map(item => ({\n          id: item.id,\n          comment: item.comment || \"No Comment Available\",\n          // Changed to match database field\n          title: item.title,\n          videoUrl: item.url,\n          commentDate: item.date,\n          commentCount: item.comment_count || 0\n        }));\n        setComments(filteredComments.length > 0 ? filteredComments : placeholderComments);\n      } catch (err) {\n        console.error('Error fetching comments:', err);\n        setError('Failed to load comments');\n        setComments(placeholderComments);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchComments();\n  }, [influencerId]);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }\n  }, error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comments-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Recent Comments\"), comments.map(item => /*#__PURE__*/React.createElement(\"div\", {\n    key: item.id,\n    className: \"comment-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment-main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    className: \"comment-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, \"\\\"\", item.comment, \"\\\"\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"video-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, \"From Video: \", item.title), item.videoUrl && /*#__PURE__*/React.createElement(\"a\", {\n    href: item.videoUrl,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"video-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }, \"View Video\")))));\n};\nexport default RecentComments;","map":{"version":3,"names":["React","useState","useEffect","RecentComments","influencerId","comments","setComments","loading","setLoading","error","setError","placeholderComments","id","Comment","title","fetchComments","response","fetch","ok","Error","data","json","filteredComments","filter","item","influencer_id","sort","a","b","Date","date","slice","map","comment","videoUrl","url","commentDate","commentCount","comment_count","length","err","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","key","href","target","rel"],"sources":["/Users/jessicayu/Documents/GitHub/vibeCHECK-frontend/src/RecentComments.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst RecentComments = ({ influencerId }) => {\n    const [comments, setComments] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const placeholderComments = [\n        {\n            id: 1,\n            Comment: \"Search for a celebrity to see what fans are saying\",\n            title: \"No comments yet\",\n        },\n        {\n            id: 2,\n            Comment: \"Discover fan reactions and discussions\",\n            title: \"Waiting for selection\",\n        },\n        {\n            id: 3,\n            Comment: \"See what people are talking about\",\n            title: \"Select a celebrity above\",\n        }\n    ];\n\n    useEffect(() => {\n        const fetchComments = async () => {\n            if (!influencerId) {\n                setComments(placeholderComments);\n                setLoading(false);\n                return;\n            }\n\n            try {\n                setLoading(true);\n                const response = await fetch('http://127.0.0.1:8000/Videos');\n                \n                if (!response.ok) {\n                    throw new Error('Failed to fetch comments');\n                }\n\n                const data = await response.json();\n\n                const filteredComments = data\n                    .filter(item => item.influencer_id === influencerId)\n                    .sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0))\n                    .slice(0, 3)\n                    .map(item => ({\n                        id: item.id,\n                        comment: item.comment || \"No Comment Available\", // Changed to match database field\n                        title: item.title,\n                        videoUrl: item.url,\n                        commentDate: item.date,\n                        commentCount: item.comment_count || 0\n                    }));\n\n                setComments(filteredComments.length > 0 ? filteredComments : placeholderComments);\n            } catch (err) {\n                console.error('Error fetching comments:', err);\n                setError('Failed to load comments');\n                setComments(placeholderComments);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchComments();\n    }, [influencerId]);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>{error}</div>;\n\n    return (\n        <div className=\"comments-section\">\n            <h2>Recent Comments</h2>\n            {comments.map(item => (\n                <div key={item.id} className=\"comment-card\">\n                    <div className=\"comment-main\">\n                        <blockquote className=\"comment-text\">\n                            \"{item.comment}\"\n                        </blockquote>\n                    </div>\n                    <div className=\"video-details\">\n                        <h4>From Video: {item.title}</h4>\n                        {item.videoUrl && (\n                            <a \n                                href={item.videoUrl} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"video-link\"\n                            >\n                                View Video\n                            </a>\n                        )}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default RecentComments;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}