{"ast":null,"code":"var _jsxFileName = \"/Users/ianchen/Documents/GitHub/vibeCHECK-frontend/src/RecentComments.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecentComments = ({\n  influencerId\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const placeholderComments = [{\n    id: 1,\n    Comment: \"Search for a celebrity to see what fans are saying\",\n    title: \"No comments yet\"\n  }, {\n    id: 2,\n    Comment: \"Discover fan reactions and discussions\",\n    title: \"Waiting for selection\"\n  }, {\n    id: 3,\n    Comment: \"See what people are talking about\",\n    title: \"Select a celebrity above\"\n  }];\n  useEffect(() => {\n    const fetchComments = async () => {\n      if (!influencerId) {\n        setComments(placeholderComments);\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        const response = await fetch('http://127.0.0.1:8000/Videos');\n        if (!response.ok) {\n          throw new Error('Failed to fetch comments');\n        }\n        const data = await response.json();\n        const filteredComments = data.filter(item => item.influencer_id === influencerId).sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0)).slice(0, 3).map(item => ({\n          id: item.id,\n          comment: item.Comment || comment,\n          // Changed to match database field\n          title: item.title,\n          videoUrl: item.url,\n          commentDate: item.date,\n          commentCount: item.comment_count || 0\n        }));\n        setComments(filteredComments.length > 0 ? filteredComments : placeholderComments);\n      } catch (err) {\n        console.error('Error fetching comments:', err);\n        setError('Failed to load comments');\n        setComments(placeholderComments);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchComments();\n  }, [influencerId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recent Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), comments.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-main\",\n        children: /*#__PURE__*/_jsxDEV(\"blockquote\", {\n          className: \"comment-text\",\n          children: [\"\\\"\", item.comment, \"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"From Video: \", item.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), item.videoUrl && /*#__PURE__*/_jsxDEV(\"a\", {\n          href: item.videoUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: \"video-link\",\n          children: \"View Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(RecentComments, \"9U0+ds+yqH5Twr7odiPeQomUgmg=\");\n_c = RecentComments;\nexport default RecentComments;\nvar _c;\n$RefreshReg$(_c, \"RecentComments\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RecentComments","influencerId","_s","comments","setComments","loading","setLoading","error","setError","placeholderComments","id","Comment","title","fetchComments","response","fetch","ok","Error","data","json","filteredComments","filter","item","influencer_id","sort","a","b","Date","date","slice","map","comment","videoUrl","url","commentDate","commentCount","comment_count","length","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/ianchen/Documents/GitHub/vibeCHECK-frontend/src/RecentComments.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst RecentComments = ({ influencerId }) => {\n    const [comments, setComments] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const placeholderComments = [\n        {\n            id: 1,\n            Comment: \"Search for a celebrity to see what fans are saying\",\n            title: \"No comments yet\",\n        },\n        {\n            id: 2,\n            Comment: \"Discover fan reactions and discussions\",\n            title: \"Waiting for selection\",\n        },\n        {\n            id: 3,\n            Comment: \"See what people are talking about\",\n            title: \"Select a celebrity above\",\n        }\n    ];\n\n    useEffect(() => {\n        const fetchComments = async () => {\n            if (!influencerId) {\n                setComments(placeholderComments);\n                setLoading(false);\n                return;\n            }\n\n            try {\n                setLoading(true);\n                const response = await fetch('http://127.0.0.1:8000/Videos');\n                \n                if (!response.ok) {\n                    throw new Error('Failed to fetch comments');\n                }\n\n                const data = await response.json();\n\n                const filteredComments = data\n                    .filter(item => item.influencer_id === influencerId)\n                    .sort((a, b) => new Date(b.date || 0) - new Date(a.date || 0))\n                    .slice(0, 3)\n                    .map(item => ({\n                        id: item.id,\n                        comment: item.Comment || comment, // Changed to match database field\n                        title: item.title,\n                        videoUrl: item.url,\n                        commentDate: item.date,\n                        commentCount: item.comment_count || 0\n                    }));\n\n                setComments(filteredComments.length > 0 ? filteredComments : placeholderComments);\n            } catch (err) {\n                console.error('Error fetching comments:', err);\n                setError('Failed to load comments');\n                setComments(placeholderComments);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchComments();\n    }, [influencerId]);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>{error}</div>;\n\n    return (\n        <div className=\"comments-section\">\n            <h2>Recent Comments</h2>\n            {comments.map(item => (\n                <div key={item.id} className=\"comment-card\">\n                    <div className=\"comment-main\">\n                        <blockquote className=\"comment-text\">\n                            \"{item.comment}\"\n                        </blockquote>\n                    </div>\n                    <div className=\"video-details\">\n                        <h4>From Video: {item.title}</h4>\n                        {item.videoUrl && (\n                            <a \n                                href={item.videoUrl} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"video-link\"\n                            >\n                                View Video\n                            </a>\n                        )}\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default RecentComments;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}